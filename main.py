import telebot
from telebot import types
import json
import os
from datetime import datetime

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = ''

bot = telebot.TeleBot(API_TOKEN)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
FEEDBACK_FILE = 'feedback.json'

# –£—á–∏—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã
teachers_prog = {
    '–•–∞—Ä—á–µ–Ω–∫–æ –ù–∏–∫–∏—Ç–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–∏—áüòé': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python.',
    '–ü—Ç–∞—à–∏–Ω—Å–∫–∏–π –ò–≥–æ—Ä—å –ê–Ω–¥—Ä–µ–µ–≤–∏—áüßîüèª‚Äç‚ôÇÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è.',
    '–ß–∏—Ö–∞—á—ë–≤ –ê—Ä—Ç–µ–º –ê—Ä–∫–∞–¥—å–µ–≤–∏—áüßîüèª‚Äç‚ôÇÔ∏è‚òÅÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.',
    '–ß–∏–Ω–¥—è–π–∫–∏–Ω–∞ –ú–∞—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ü¶Ö': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
    '–§–æ—Ñ–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –±–∏–æ–ª–æ–≥–∏–∏ –∏ —Ö–∏–º–∏–∏',
    '–õ—ã—Å–æ–≥–æ—Ä—Å–∫–∏–π –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∏ –æ—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã',
    '–í–æ–ª–æ—à–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Windows 10',
}

# –£—á–∏—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ "–î–∏–∑–∞–π–Ω–µ—Ä—ã"
teachers_diz = {
    '–ü–æ—Ç—è–∫–∏–Ω–∞ –í–∞–ª–µ—Ä–∏—è –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞üêà': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –û–ò–¢, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏.',
    '–ò–≥–Ω–∞—Ç–µ–Ω–∫–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞‚úùÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤',
    '–ü—Ç–∞—à–∏–Ω—Å–∫–∏–π –ò–≥–æ—Ä—å –ê–Ω–¥—Ä–µ–µ–≤–∏—áüõêü§†': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏, –æ–±—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–Ω–æ–≤ Photoshop adapt',
    '–ö–ª–∏–º–µ–Ω–∫–æ –ù–∞—Ç–∞–ª—å—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞ü¶™üö∑üìµ': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏',
    '–ú–∞–º–µ–¥–æ–≤–∞ –ù–∞—Ä–≥–∏–∑ –ú–µ—Ö–º–∞–Ω–æ–≤–Ω–∞üë©‚Äçüî¨': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ö–∏–º–∏–∏',
    '–ß–∏–Ω–¥—è–π–∫–∏–Ω–∞ –ú–∞—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ü¶Ö': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞'
}


# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_feedback():
    if os.path.exists(FEEDBACK_FILE):
        with open(FEEDBACK_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ñ–∞–π–ª
def save_feedback_to_file(feedback_data):
    with open(FEEDBACK_FILE, 'w', encoding='utf-8') as f:
        json.dump(feedback_data, f, ensure_ascii=False, indent=4)


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ - /help")


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    /help - –≠—Ç–∞ –ø–æ–º–æ—â—å
    /teachers - –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π 
    /feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    /view_feedback - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã
    /my_reviews - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã
    /resources - –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    """
    bot.reply_to(message, help_text)


# –ö–æ–º–∞–Ω–¥–∞ /resources
@bot.message_handler(commands=['resources'])
def resources_command(message):
    resources_text = """
    –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:

    –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã:
    1. Coursera - https://www.coursera.org/
    2. Codecademy - https://www.codecademy.com/
    3. Udemy - https://www.udemy.com/
    4. RealPython - https://realpython.com/
    5. GitHub - https://github.com/

    –î–∏–∑–∞–π–Ω–µ—Ä—ã:
    1. Canva - https://www.canva.com/
    2. Adobe Creative Cloud - https://www.adobe.com/creativecloud.html
    3. Behance - https://www.behance.net/
    4. Dribbble - https://dribbble.com/
    5. Skillshare - https://www.skillshare.com/
    """
    bot.reply_to(message, resources_text)


# –ö–æ–º–∞–Ω–¥–∞ /teachers
@bot.message_handler(commands=['teachers'])
def list_teachers(message):
    teachers_list = ""
    for group, teachers in zip(['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã', '–î–∏–∑–∞–π–Ω–µ—Ä—ã'], [teachers_prog, teachers_diz]):
        teachers_list += f"\n–ì—Ä—É–ø–ø–∞: {group}\n"
        for i, (name, desc) in enumerate(teachers.items()):
            teachers_list += f"{i + 1}. {name} - {desc}\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–∞—è', callback_data='home'))

    bot.reply_to(message, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n{teachers_list}", reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ /feedback
@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    all_teachers = list(set(list(teachers_prog.keys()) + list(teachers_diz.keys())))

    for teacher in all_teachers:
        keyboard.add(teacher)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text in set(list(teachers_prog.keys()) + list(teachers_diz.keys())))
def select_teacher(message):
    selected_teacher = message.text
    bot.send_message(message.chat.id,
                     f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ {selected_teacher}:",
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_feedback, selected_teacher)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
def process_feedback(message, teacher):
    feedback_data = load_feedback()
    user_id = str(message.from_user.id)

    if user_id not in feedback_data:
        feedback_data[user_id] = []

    feedback_data[user_id].append({
        'teacher': teacher,
        'text': message.text,
        'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    save_feedback_to_file(feedback_data)
    bot.reply_to(message, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")


# –ö–æ–º–∞–Ω–¥–∞ /view_feedback - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
@bot.message_handler(commands=['view_feedback'])
def view_feedback(message):
    feedback_data = load_feedback()

    if not feedback_data:
        bot.reply_to(message, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìù –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for user_id, reviews in feedback_data.items():
        for review in reviews:
            response += f"üë§ {review['teacher']}\n"
            response += f"‚ûñ {review['text']}\n"
            response += f"üìÖ {review['date']}\n\n"

    bot.reply_to(message, response)


# –ö–æ–º–∞–Ω–¥–∞ /my_reviews - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
@bot.message_handler(commands=['my_reviews'])
def show_my_reviews(message):
    feedback_data = load_feedback()
    user_id = str(message.from_user.id)

    if user_id not in feedback_data or not feedback_data[user_id]:
        bot.reply_to(message, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return

    response = "üìñ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n"
    for idx, review in enumerate(feedback_data[user_id], 1):
        response += f"{idx}. {review['teacher']}\n"
        response += f"‚ûñ {review['text']}\n"
        response += f"üìÖ {review['date']}\n\n"

    bot.reply_to(message, response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda q: q.data == 'home')
def teachers_home(query):
    bot.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                          query.message.chat.id,
                          query.message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()
