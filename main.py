import telebot
from telebot import types
import json
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

bot = telebot.TeleBot(API_TOKEN)

# –§–∞–π–ª—ã
TEACHERS_FILE = 'teachers.json'
FEEDBACK_FILE = 'feedback.json'

# –ê–¥–º–∏–Ω—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π chat_id)
ADMINS = [7245536246]


# === –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ ===

def load_teachers():
    if os.path.exists(TEACHERS_FILE):
        with open(TEACHERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã": {}, "–î–∏–∑–∞–π–Ω–µ—Ä—ã": {}}


def save_teachers(data):
    with open(TEACHERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


# === –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ ===

def load_feedback():
    if os.path.exists(FEEDBACK_FILE):
        with open(FEEDBACK_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}


def save_feedback_to_file(feedback_data):
    with open(FEEDBACK_FILE, 'w', encoding='utf-8') as f:
        json.dump(feedback_data, f, ensure_ascii=False, indent=4)


# === –ö–æ–º–∞–Ω–¥—ã ===

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /help")


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, """
/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help ‚Äî –ø–æ–º–æ—â—å
/teachers ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
/feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
/view_feedback ‚Äî –≤—Å–µ –æ—Ç–∑—ã–≤—ã
/my_reviews ‚Äî –º–æ–∏ –æ—Ç–∑—ã–≤—ã
/resources ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
/admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
""")


@bot.message_handler(commands=['resources'])
def resources_command(message):
    bot.reply_to(message, """
–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
‚Äî –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã: Coursera, Codecademy, Udemy, GitHub
‚Äî –î–∏–∑–∞–π–Ω–µ—Ä—ã: Canva, Adobe, Behance, Dribbble
""")


@bot.message_handler(commands=['teachers'])
def list_teachers(message):
    data = load_teachers()
    result = ""
    for group, teachers in data.items():
        result += f"\nüìö {group}:\n"
        for i, (name, desc) in enumerate(teachers.items(), 1):
            result += f"{i}. {name} ‚Äî {desc}\n"
    bot.reply_to(message, result)


@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id not in ADMINS:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data='add_teacher'))
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data='remove_teacher'))
    bot.reply_to(message, "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ===

@bot.callback_query_handler(func=lambda c: c.data == 'add_teacher')
def add_teacher_start(callback):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    keyboard.add("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã", "–î–∏–∑–∞–π–Ω–µ—Ä—ã")
    msg = bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_group_for_add)


def process_group_for_add(message):
    group = message.text.strip()
    if group not in ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã", "–î–∏–∑–∞–π–Ω–µ—Ä—ã"]:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞.")
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(msg, lambda m: process_name_for_add(m, group))


def process_name_for_add(message, group):
    name = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(msg, lambda m: finish_add_teacher(m, group, name))


def finish_add_teacher(message, group, name):
    desc = message.text.strip()
    data = load_teachers()
    data[group][name] = desc
    save_teachers(data)
    bot.reply_to(message, f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group}.")


# === –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ===

@bot.callback_query_handler(func=lambda c: c.data == 'remove_teacher')
def remove_teacher_start(callback):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    keyboard.add("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã", "–î–∏–∑–∞–π–Ω–µ—Ä—ã")
    msg = bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_group_for_remove)


def process_group_for_remove(message):
    group = message.text.strip()
    data = load_teachers()
    if group not in data:
        bot.reply_to(message, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not data[group]:
        bot.reply_to(message, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for name in data[group].keys():
        keyboard.add(name)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, lambda m: finish_remove_teacher(m, group))


def finish_remove_teacher(message, group):
    name = message.text.strip()
    data = load_teachers()
    if name in data[group]:
        del data[group][name]
        save_teachers(data)
        bot.reply_to(message, f"üóëÔ∏è {name} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group}.")
    else:
        bot.reply_to(message, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# === –û—Ç–∑—ã–≤—ã ===

@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    data = load_teachers()
    all_teachers = []
    for teachers in data.values():
        all_teachers.extend(teachers.keys())
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for name in all_teachers:
        keyboard.add(name)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)


@bot.message_handler(func=lambda m: m.text in sum([list(v.keys()) for v in load_teachers().values()], []))
def select_teacher(message):
    selected_teacher = message.text
    bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ {selected_teacher}:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_feedback, selected_teacher)


def process_feedback(message, teacher):
    feedback_data = load_feedback()
    user_id = str(message.from_user.id)
    if user_id not in feedback_data:
        feedback_data[user_id] = []
    feedback_data[user_id].append({
        'teacher': teacher,
        'text': message.text,
        'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    save_feedback_to_file(feedback_data)
    bot.reply_to(message, "‚úÖ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


@bot.message_handler(commands=['view_feedback'])
def view_feedback(message):
    feedback_data = load_feedback()
    if not feedback_data:
        bot.reply_to(message, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    result = "üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for reviews in feedback_data.values():
        for review in reviews:
            result += f"üë§ {review['teacher']}\n‚ûñ {review['text']}\nüìÖ {review['date']}\n\n"
    bot.reply_to(message, result)


@bot.message_handler(commands=['my_reviews'])
def show_my_reviews(message):
    feedback_data = load_feedback()
    user_id = str(message.from_user.id)
    if user_id not in feedback_data or not feedback_data[user_id]:
        bot.reply_to(message, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return
    result = "üìñ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n"
    for i, review in enumerate(feedback_data[user_id], 1):
        result += f"{i}. {review['teacher']}\n‚ûñ {review['text']}\nüìÖ {review['date']}\n\n"
    bot.reply_to(message, result)


# === –ó–∞–ø—É—Å–∫ ===

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
