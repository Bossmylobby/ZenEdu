import telebot
from telebot import types
import json
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

bot = telebot.TeleBot(API_TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
FEEDBACK_FILE = 'feedback.json'
TEACHERS_FILE = 'teachers.json'


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_teachers():
    default_teachers = {
        'teachers_prog': {
            '–•–∞—Ä—á–µ–Ω–∫–æ –ù–∏–∫–∏—Ç–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–∏—áüòé': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python.',
            '–ü—Ç–∞—à–∏–Ω—Å–∫–∏–π –ò–≥–æ—Ä—å –ê–Ω–¥—Ä–µ–µ–≤–∏—áüßîüèª‚Äç‚ôÇÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è.',
            '–ß–∏—Ö–∞—á—ë–≤ –ê—Ä—Ç–µ–º –ê—Ä–∫–∞–¥—å–µ–≤–∏—áüßîüèª‚Äç‚ôÇÔ∏è‚òÅÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.',
            '–ß–∏–Ω–¥—è–π–∫–∏–Ω–∞ –ú–∞—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ü¶Ö': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
            '–§–æ—Ñ–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –±–∏–æ–ª–æ–≥–∏–∏ –∏ —Ö–∏–º–∏–∏',
            '–õ—ã—Å–æ–≥–æ—Ä—Å–∫–∏–π –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∏ –æ—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã',
            '–í–æ–ª–æ—à–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Windows 10'
        },
        'teachers_diz': {
            '–ü–æ—Ç—è–∫–∏–Ω–∞ –í–∞–ª–µ—Ä–∏—è –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞üêà': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –û–ò–¢, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏.',
            '–ò–≥–Ω–∞—Ç–µ–Ω–∫–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞‚úùÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤',
            '–ü—Ç–∞—à–∏–Ω—Å–∫–∏–π –ò–≥–æ—Ä—å –ê–Ω–¥—Ä–µ–µ–≤–∏—áüõêü§†': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏, –æ–±—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–Ω–æ–≤ Photoshop adapt',
            '–ö–ª–∏–º–µ–Ω–∫–æ –ù–∞—Ç–∞–ª—å—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞üòí': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏',
            '–ú–∞–º–µ–¥–æ–≤–∞ –ù–∞—Ä–≥–∏–∑ –ú–µ—Ö–º–∞–Ω–æ–≤–Ω–∞üë©‚Äçüî¨': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ö–∏–º–∏–∏',
            '–ß–∏–Ω–¥—è–π–∫–∏–Ω–∞ –ú–∞—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ü¶Ö': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞'
        }
    }

    if os.path.exists(TEACHERS_FILE):
        try:
            with open(TEACHERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            with open(TEACHERS_FILE, 'w', encoding='utf-8') as f:
                json.dump(default_teachers, f, ensure_ascii=False, indent=4)
            return default_teachers
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        with open(TEACHERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(default_teachers, f, ensure_ascii=False, indent=4)
        return default_teachers


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_teachers(teachers_data):
    with open(TEACHERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(teachers_data, f, ensure_ascii=False, indent=4)


# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_feedback():
    if os.path.exists(FEEDBACK_FILE):
        with open(FEEDBACK_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ñ–∞–π–ª
def save_feedback_to_file(feedback_data):
    with open(FEEDBACK_FILE, 'w', encoding='utf-8') as f:
        json.dump(feedback_data, f, ensure_ascii=False, indent=4)


# –ö–æ–º–∞–Ω–¥–∞ /teachers
@bot.message_handler(commands=['teachers'])
def list_teachers(message):
    teachers_data = load_teachers()
    teachers_prog = teachers_data.get('teachers_prog', {})
    teachers_diz = teachers_data.get('teachers_diz', {})

    teachers_list = ""
    for group, teachers in [('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã', teachers_prog), ('–î–∏–∑–∞–π–Ω–µ—Ä—ã', teachers_diz)]:
        teachers_list += f"\n–ì—Ä—É–ø–ø–∞: {group}\n"
        for i, (name, desc) in enumerate(teachers.items()):
            teachers_list += f"{i + 1}. {name} - {desc}\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–∞—è', callback_data='home'))

    bot.reply_to(message, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n{teachers_list}", reply_markup=markup)


ADMINS = [7245536246]  # –í–∞—à chat_id


# –ö–æ–º–∞–Ω–¥–∞ /admin
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id not in ADMINS:
        bot.reply_to(message, "üö® –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data='add_teacher'),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data='remove_teacher')
    )
    markup.row(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data='stats'))
    bot.reply_to(message, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == 'add_teacher')
def add_teacher_callback(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã", callback_data='add_prog'),
        types.InlineKeyboardButton("–î–∏–∑–∞–π–Ω–µ—Ä—ã", callback_data='add_diz')
    )
    markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_admin'))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == 'remove_teacher')
def remove_teacher_callback(call):
    teachers_data = load_teachers()
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã", callback_data='remove_prog'),
        types.InlineKeyboardButton("–î–∏–∑–∞–π–Ω–µ—Ä—ã", callback_data='remove_diz')
    )
    markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_admin'))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data in ['add_prog', 'add_diz'])
def select_group_for_add(call):
    group = 'teachers_prog' if call.data == 'add_prog' else 'teachers_diz'
    msg = bot.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {call.data.replace('add_', '')} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ò–º—è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –û–ø–∏—Å–∞–Ω–∏–µ",
        call.message.chat.id,
        call.message.message_id)
    bot.register_next_step_handler(msg, process_add_teacher, group)


# –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
def process_add_teacher(message, group):
    try:
        name, description = message.text.split(' - ', 1)
        teachers_data = load_teachers()

        if group not in teachers_data:
            teachers_data[group] = {}

        teachers_data[group][name.strip()] = description.strip()
        save_teachers(teachers_data)

        bot.reply_to(message, f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group.replace('teachers_', '')}!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ò–º—è - –û–ø–∏—Å–∞–Ω–∏–µ")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data in ['remove_prog', 'remove_diz'])
def select_group_for_remove(call):
    teachers_data = load_teachers()
    group = 'teachers_prog' if call.data == 'remove_prog' else 'teachers_diz'
    teachers = teachers_data.get(group, {})

    markup = types.InlineKeyboardMarkup()

    if not teachers:
        bot.edit_message_text(f"–í –≥—Ä—É–ø–ø–µ {group.replace('teachers_', '')} –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                              call.message.chat.id,
                              call.message.message_id)
        return

    for teacher in teachers.keys():
        callback_data = f"remove_teacher_{group}_{teacher}"
        markup.add(types.InlineKeyboardButton(teacher, callback_data=callback_data))

    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_admin'))
    bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã {group.replace('teachers_', '')}:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_teacher_'))
def remove_specific_teacher(call):
    parts = call.data.split('_')
    if len(parts) < 4:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        return

    group = '_'.join(parts[2:-1])
    teacher_name = parts[-1]

    teachers_data = load_teachers()

    if group in teachers_data and teacher_name in teachers_data[group]:
        del teachers_data[group][teacher_name]
        save_teachers(teachers_data)
        bot.edit_message_text(f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {teacher_name} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group.replace('teachers_', '')}.",
                              call.message.chat.id,
                              call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data == 'back_to_admin')
def back_to_admin(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data='add_teacher'),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data='remove_teacher')
    )
    markup.row(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data='stats'))
    bot.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ /feedback
@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    teachers_data = load_teachers()
    all_teachers = list(teachers_data.get('teachers_prog', {}).keys()) + list(
        teachers_data.get('teachers_diz', {}).keys())

    if not all_teachers:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    for teacher in all_teachers:
        keyboard.add(teacher)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞
@bot.message_handler(func=lambda message: True)
def handle_teacher_selection(message):
    teachers_data = load_teachers()
    all_teachers = list(teachers_data.get('teachers_prog', {}).keys()) + list(
        teachers_data.get('teachers_diz', {}).keys())

    if message.text in all_teachers:
        selected_teacher = message.text
        bot.send_message(message.chat.id,
                         f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ {selected_teacher}:",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_feedback, selected_teacher)
    else:
        bot.reply_to(message, "–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/start, /help, /resources –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ...

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()